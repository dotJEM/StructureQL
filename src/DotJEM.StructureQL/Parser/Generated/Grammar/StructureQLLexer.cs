//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar\StructureQL.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotJEM.StructureQL.Generated.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class StructureQLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WS=10, INTEGER=11, STRING=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"DIGIT", "ESC", "CHAR", "WS", "INTEGER", "STRING"
	};


	public StructureQLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public StructureQLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "'..'", "']'", "'{'", "','", "'}'", "':'", "'**'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WS", "INTEGER", 
		"STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StructureQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static StructureQLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', 'J', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x6', '\xF', '\x42', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x43', 
		'\x3', '\x10', '\x6', '\x10', 'G', '\n', '\x10', '\r', '\x10', '\xE', 
		'\x10', 'H', '\x2', '\x2', '\x11', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', 
		'\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', 
		'\v', '\x15', '\x2', '\x17', '\x2', '\x19', '\x2', '\x1B', '\f', '\x1D', 
		'\r', '\x1F', '\xE', '\x3', '\x2', '\x4', '\xE', '\x2', '\v', '\f', '\xF', 
		'\xF', '\"', '\"', ',', ',', '.', '.', '\x30', '\x30', '<', '<', ']', 
		']', '_', '_', '}', '}', '\x7F', '\x7F', '\x3002', '\x3002', '\x6', '\x2', 
		'\v', '\f', '\xF', '\xF', '\"', '\"', '\x3002', '\x3002', '\x2', 'H', 
		'\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '!', '\x3', '\x2', '\x2', '\x2', '\x5', '#', '\x3', '\x2', '\x2', 
		'\x2', '\a', '&', '\x3', '\x2', '\x2', '\x2', '\t', '(', '\x3', '\x2', 
		'\x2', '\x2', '\v', '*', '\x3', '\x2', '\x2', '\x2', '\r', ',', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '.', '\x3', '\x2', '\x2', '\x2', '\x11', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x35', '\x3', '\x2', '\x2', '\x2', '\x17', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x19', ':', '\x3', '\x2', '\x2', '\x2', '\x1B', '<', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', ']', '\x2', '\x2', 
		'\"', '\x4', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x30', '\x2', 
		'\x2', '$', '%', '\a', '\x30', '\x2', '\x2', '%', '\x6', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\a', '_', '\x2', '\x2', '\'', '\b', '\x3', '\x2', 
		'\x2', '\x2', '(', ')', '\a', '}', '\x2', '\x2', ')', '\n', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\a', '.', '\x2', '\x2', '+', '\f', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\a', '\x7F', '\x2', '\x2', '-', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\a', '<', '\x2', '\x2', '/', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\a', ',', '\x2', '\x2', '\x31', 
		'\x32', '\a', ',', '\x2', '\x2', '\x32', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\a', ',', '\x2', '\x2', '\x34', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x4', '\x32', ';', '\x2', '\x36', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '^', '\x2', 
		'\x2', '\x38', '\x39', '\v', '\x2', '\x2', '\x2', '\x39', '\x18', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\n', '\x2', '\x2', '\x2', ';', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '<', '=', '\t', '\x3', '\x2', '\x2', '=', 
		'>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\b', '\xE', '\x2', '\x2', 
		'?', '\x1C', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x5', '\x15', '\v', 
		'\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x45', 'G', '\x5', '\x19', '\r', '\x2', '\x46', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x5', '\x2', '\x43', 'H', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DotJEM.StructureQL.Generated.Parser
