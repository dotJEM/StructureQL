//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar\StructureQL.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotJEM.StructureQL.Generated.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class StructureQLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, STRING=12, INTEGER=13, WS=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "STRING", "INTEGER", "ESC", "CHAR", "UNICODE", "HEX", 
		"SAFECODEPOINT", "NUM", "WS"
	};


	public StructureQLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public StructureQLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "'['", "'..'", "']'", "'[..'", "'..]'", "':'", 
		"'**'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"STRING", "INTEGER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StructureQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StructureQLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,100,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
		8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,4,11,71,8,11,11,11,12,11,72,1,12,4,12,
		76,8,12,11,12,12,12,77,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,
		15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,0,0,20,1,1,3,
		2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,0,29,0,31,
		0,33,0,35,0,37,0,39,14,1,0,4,11,0,9,10,13,13,32,32,42,42,44,44,58,58,91,
		91,93,93,123,123,125,125,12288,12288,3,0,48,57,65,70,97,102,3,0,0,31,34,
		34,92,92,4,0,9,10,13,13,32,32,12288,12288,95,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,39,
		1,0,0,0,1,41,1,0,0,0,3,43,1,0,0,0,5,45,1,0,0,0,7,47,1,0,0,0,9,49,1,0,0,
		0,11,52,1,0,0,0,13,54,1,0,0,0,15,58,1,0,0,0,17,62,1,0,0,0,19,64,1,0,0,
		0,21,67,1,0,0,0,23,70,1,0,0,0,25,75,1,0,0,0,27,79,1,0,0,0,29,82,1,0,0,
		0,31,84,1,0,0,0,33,90,1,0,0,0,35,92,1,0,0,0,37,94,1,0,0,0,39,96,1,0,0,
		0,41,42,5,123,0,0,42,2,1,0,0,0,43,44,5,44,0,0,44,4,1,0,0,0,45,46,5,125,
		0,0,46,6,1,0,0,0,47,48,5,91,0,0,48,8,1,0,0,0,49,50,5,46,0,0,50,51,5,46,
		0,0,51,10,1,0,0,0,52,53,5,93,0,0,53,12,1,0,0,0,54,55,5,91,0,0,55,56,5,
		46,0,0,56,57,5,46,0,0,57,14,1,0,0,0,58,59,5,46,0,0,59,60,5,46,0,0,60,61,
		5,93,0,0,61,16,1,0,0,0,62,63,5,58,0,0,63,18,1,0,0,0,64,65,5,42,0,0,65,
		66,5,42,0,0,66,20,1,0,0,0,67,68,5,42,0,0,68,22,1,0,0,0,69,71,3,29,14,0,
		70,69,1,0,0,0,71,72,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,24,1,0,0,0,
		74,76,3,37,18,0,75,74,1,0,0,0,76,77,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,
		0,78,26,1,0,0,0,79,80,5,92,0,0,80,81,9,0,0,0,81,28,1,0,0,0,82,83,8,0,0,
		0,83,30,1,0,0,0,84,85,5,117,0,0,85,86,3,33,16,0,86,87,3,33,16,0,87,88,
		3,33,16,0,88,89,3,33,16,0,89,32,1,0,0,0,90,91,7,1,0,0,91,34,1,0,0,0,92,
		93,8,2,0,0,93,36,1,0,0,0,94,95,2,48,57,0,95,38,1,0,0,0,96,97,7,3,0,0,97,
		98,1,0,0,0,98,99,6,19,0,0,99,40,1,0,0,0,3,0,72,77,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DotJEM.StructureQL.Generated.Parser
