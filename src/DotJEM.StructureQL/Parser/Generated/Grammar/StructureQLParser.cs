//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar\StructureQL.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotJEM.StructureQL.Generated.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class StructureQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WS=10, INTEGER=11, STRING=12;
	public const int
		RULE_query = 0, RULE_array = 1, RULE_object = 2, RULE_property = 3, RULE_part = 4, 
		RULE_match = 5, RULE_recursiveMatchAll = 6, RULE_simpleMatchAll = 7, RULE_number = 8;
	public static readonly string[] ruleNames = {
		"query", "array", "object", "property", "part", "match", "recursiveMatchAll", 
		"simpleMatchAll", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "'..'", "']'", "'{'", "','", "'}'", "':'", "'**'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WS", "INTEGER", 
		"STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StructureQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StructureQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StructureQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StructureQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatchContext match() {
			return GetRuleContext<MatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 20;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__8:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				match();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19;
				@object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public NumberContext lower;
		public NumberContext upper;
		public PartContext elementQuery;
		[System.Diagnostics.DebuggerNonUserCode] public PartContext part() {
			return GetRuleContext<PartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 2, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			Match(T__0);
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 23;
				_localctx.lower = number();
				}
			}

			State = 26;
			Match(T__1);
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 27;
				_localctx.upper = number();
				}
			}

			State = 30;
			Match(T__2);
			State = 31;
			_localctx.elementQuery = part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatchContext[] match() {
			return GetRuleContexts<MatchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchContext match(int i) {
			return GetRuleContext<MatchContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 4, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(T__3);
			State = 34;
			match();
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 35;
				Match(T__4);
				State = 36;
				match();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 42;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StructureQLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartContext part() {
			return GetRuleContext<PartContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_property);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45;
				Match(STRING);
				State = 46;
				Match(T__6);
				State = 47;
				part();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecursiveMatchAllContext recursiveMatchAll() {
			return GetRuleContext<RecursiveMatchAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleMatchAllContext simpleMatchAll() {
			return GetRuleContext<SimpleMatchAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public PartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartContext part() {
		PartContext _localctx = new PartContext(Context, State);
		EnterRule(_localctx, 8, RULE_part);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				recursiveMatchAll();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				simpleMatchAll();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52;
				array();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 53;
				@object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecursiveMatchAllContext recursiveMatchAll() {
			return GetRuleContext<RecursiveMatchAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleMatchAllContext simpleMatchAll() {
			return GetRuleContext<SimpleMatchAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public MatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterMatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitMatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchContext match() {
		MatchContext _localctx = new MatchContext(Context, State);
		EnterRule(_localctx, 10, RULE_match);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				recursiveMatchAll();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				simpleMatchAll();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 58;
				property();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecursiveMatchAllContext : ParserRuleContext {
		public RecursiveMatchAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursiveMatchAll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterRecursiveMatchAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitRecursiveMatchAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursiveMatchAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecursiveMatchAllContext recursiveMatchAll() {
		RecursiveMatchAllContext _localctx = new RecursiveMatchAllContext(Context, State);
		EnterRule(_localctx, 12, RULE_recursiveMatchAll);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleMatchAllContext : ParserRuleContext {
		public SimpleMatchAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleMatchAll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterSimpleMatchAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitSimpleMatchAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleMatchAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleMatchAllContext simpleMatchAll() {
		SimpleMatchAllContext _localctx = new SimpleMatchAllContext(Context, State);
		EnterRule(_localctx, 14, RULE_simpleMatchAll);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(StructureQLParser.INTEGER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,68,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,1,0,3,0,21,8,0,1,1,1,1,3,1,25,8,1,1,1,1,1,3,1,29,8,1,1,
		1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,38,8,2,10,2,12,2,41,9,2,1,2,1,2,1,3,1,3,
		1,3,1,3,3,3,49,8,3,1,4,1,4,1,4,1,4,3,4,55,8,4,1,5,1,5,1,5,3,5,60,8,5,1,
		6,1,6,1,7,1,7,1,8,1,8,1,8,0,0,9,0,2,4,6,8,10,12,14,16,0,0,68,0,20,1,0,
		0,0,2,22,1,0,0,0,4,33,1,0,0,0,6,48,1,0,0,0,8,54,1,0,0,0,10,59,1,0,0,0,
		12,61,1,0,0,0,14,63,1,0,0,0,16,65,1,0,0,0,18,21,3,10,5,0,19,21,3,4,2,0,
		20,18,1,0,0,0,20,19,1,0,0,0,21,1,1,0,0,0,22,24,5,1,0,0,23,25,3,16,8,0,
		24,23,1,0,0,0,24,25,1,0,0,0,25,26,1,0,0,0,26,28,5,2,0,0,27,29,3,16,8,0,
		28,27,1,0,0,0,28,29,1,0,0,0,29,30,1,0,0,0,30,31,5,3,0,0,31,32,3,8,4,0,
		32,3,1,0,0,0,33,34,5,4,0,0,34,39,3,10,5,0,35,36,5,5,0,0,36,38,3,10,5,0,
		37,35,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,42,1,0,0,0,
		41,39,1,0,0,0,42,43,5,6,0,0,43,5,1,0,0,0,44,49,5,12,0,0,45,46,5,12,0,0,
		46,47,5,7,0,0,47,49,3,8,4,0,48,44,1,0,0,0,48,45,1,0,0,0,49,7,1,0,0,0,50,
		55,3,12,6,0,51,55,3,14,7,0,52,55,3,2,1,0,53,55,3,4,2,0,54,50,1,0,0,0,54,
		51,1,0,0,0,54,52,1,0,0,0,54,53,1,0,0,0,55,9,1,0,0,0,56,60,3,12,6,0,57,
		60,3,14,7,0,58,60,3,6,3,0,59,56,1,0,0,0,59,57,1,0,0,0,59,58,1,0,0,0,60,
		11,1,0,0,0,61,62,5,8,0,0,62,13,1,0,0,0,63,64,5,9,0,0,64,15,1,0,0,0,65,
		66,5,11,0,0,66,17,1,0,0,0,7,20,24,28,39,48,54,59
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DotJEM.StructureQL.Generated.Parser
