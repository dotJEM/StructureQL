//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar\StructureQL.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotJEM.StructureQL.Generated.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class StructureQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, STRING=12, INTEGER=13, WS=14;
	public const int
		RULE_query = 0, RULE_object = 1, RULE_array = 2, RULE_property = 3, RULE_match = 4, 
		RULE_recursiveMatchAll = 5, RULE_simpleMatchAll = 6;
	public static readonly string[] ruleNames = {
		"query", "object", "array", "property", "match", "recursiveMatchAll", 
		"simpleMatchAll"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "'['", "'..'", "']'", "'[..'", "'..]'", "':'", 
		"'**'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"STRING", "INTEGER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StructureQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StructureQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StructureQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StructureQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatchContext match() {
			return GetRuleContext<MatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 16;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
			case T__10:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14;
				match();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15;
				@object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatchContext[] match() {
			return GetRuleContexts<MatchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchContext match(int i) {
			return GetRuleContext<MatchContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 2, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			Match(T__0);
			State = 19;
			match();
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 20;
				Match(T__1);
				State = 21;
				match();
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 27;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public IToken lower;
		public IToken upper;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(StructureQLParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(StructureQLParser.INTEGER, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 4, RULE_array);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				Match(T__3);
				State = 30;
				_localctx.lower = Match(INTEGER);
				State = 31;
				Match(T__4);
				State = 32;
				_localctx.upper = Match(INTEGER);
				State = 33;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34;
				Match(T__6);
				State = 35;
				_localctx.upper = Match(INTEGER);
				State = 36;
				Match(T__5);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 37;
				Match(T__3);
				State = 38;
				_localctx.lower = Match(INTEGER);
				State = 39;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StructureQLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecursiveMatchAllContext recursiveMatchAll() {
			return GetRuleContext<RecursiveMatchAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleMatchAllContext simpleMatchAll() {
			return GetRuleContext<SimpleMatchAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_property);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				Match(STRING);
				State = 44;
				Match(T__8);
				State = 49;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
					{
					State = 45;
					recursiveMatchAll();
					}
					break;
				case T__10:
					{
					State = 46;
					simpleMatchAll();
					}
					break;
				case T__0:
					{
					State = 47;
					@object();
					}
					break;
				case T__3:
				case T__6:
					{
					State = 48;
					array();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecursiveMatchAllContext recursiveMatchAll() {
			return GetRuleContext<RecursiveMatchAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleMatchAllContext simpleMatchAll() {
			return GetRuleContext<SimpleMatchAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public MatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterMatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitMatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchContext match() {
		MatchContext _localctx = new MatchContext(Context, State);
		EnterRule(_localctx, 8, RULE_match);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				recursiveMatchAll();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				simpleMatchAll();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55;
				property();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecursiveMatchAllContext : ParserRuleContext {
		public RecursiveMatchAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursiveMatchAll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterRecursiveMatchAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitRecursiveMatchAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursiveMatchAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecursiveMatchAllContext recursiveMatchAll() {
		RecursiveMatchAllContext _localctx = new RecursiveMatchAllContext(Context, State);
		EnterRule(_localctx, 10, RULE_recursiveMatchAll);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleMatchAllContext : ParserRuleContext {
		public SimpleMatchAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleMatchAll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.EnterSimpleMatchAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStructureQLListener typedListener = listener as IStructureQLListener;
			if (typedListener != null) typedListener.ExitSimpleMatchAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStructureQLVisitor<TResult> typedVisitor = visitor as IStructureQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleMatchAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleMatchAllContext simpleMatchAll() {
		SimpleMatchAllContext _localctx = new SimpleMatchAllContext(Context, State);
		EnterRule(_localctx, 12, RULE_simpleMatchAll);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,63,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,3,0,17,8,0,1,1,1,1,1,1,1,1,5,1,23,8,1,10,1,12,1,26,9,1,1,1,1,1,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,41,8,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,3,3,50,8,3,3,3,52,8,3,1,4,1,4,1,4,3,4,57,8,4,1,5,1,5,1,6,1,6,1,
		6,0,0,7,0,2,4,6,8,10,12,0,0,65,0,16,1,0,0,0,2,18,1,0,0,0,4,40,1,0,0,0,
		6,51,1,0,0,0,8,56,1,0,0,0,10,58,1,0,0,0,12,60,1,0,0,0,14,17,3,8,4,0,15,
		17,3,2,1,0,16,14,1,0,0,0,16,15,1,0,0,0,17,1,1,0,0,0,18,19,5,1,0,0,19,24,
		3,8,4,0,20,21,5,2,0,0,21,23,3,8,4,0,22,20,1,0,0,0,23,26,1,0,0,0,24,22,
		1,0,0,0,24,25,1,0,0,0,25,27,1,0,0,0,26,24,1,0,0,0,27,28,5,3,0,0,28,3,1,
		0,0,0,29,30,5,4,0,0,30,31,5,13,0,0,31,32,5,5,0,0,32,33,5,13,0,0,33,41,
		5,6,0,0,34,35,5,7,0,0,35,36,5,13,0,0,36,41,5,6,0,0,37,38,5,4,0,0,38,39,
		5,13,0,0,39,41,5,8,0,0,40,29,1,0,0,0,40,34,1,0,0,0,40,37,1,0,0,0,41,5,
		1,0,0,0,42,52,5,12,0,0,43,44,5,12,0,0,44,49,5,9,0,0,45,50,3,10,5,0,46,
		50,3,12,6,0,47,50,3,2,1,0,48,50,3,4,2,0,49,45,1,0,0,0,49,46,1,0,0,0,49,
		47,1,0,0,0,49,48,1,0,0,0,50,52,1,0,0,0,51,42,1,0,0,0,51,43,1,0,0,0,52,
		7,1,0,0,0,53,57,3,10,5,0,54,57,3,12,6,0,55,57,3,6,3,0,56,53,1,0,0,0,56,
		54,1,0,0,0,56,55,1,0,0,0,57,9,1,0,0,0,58,59,5,10,0,0,59,11,1,0,0,0,60,
		61,5,11,0,0,61,13,1,0,0,0,6,16,24,40,49,51,56
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DotJEM.StructureQL.Generated.Parser
